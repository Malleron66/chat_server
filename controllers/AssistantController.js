import fs from "fs";
import path from "path";
import { spawn } from "child_process";
import mongoose from "mongoose";
import User from "../model/User.js";
import Message from "../model/Message.js";

// üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const MODEL_NAME = "gpt-oss:20b";
const PERSONA_NAME = "–ö–∞–≥—É—è –û–æ—Ü—É—Ü—É–∫–∏";
const PERSONA_DESCRIPTION = "–¢—ã ‚Äî –ö–∞–≥—É—è –û–æ—Ü—É—Ü—É–∫–∏, –º—É–¥—Ä–∞—è –∏ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–æ–≥–∏–Ω—è, –æ–±–ª–∞–¥–∞—é—â–∞—è –≥–ª—É–±–æ–∫–∏–º –∑–Ω–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.";

// üìÅ –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getPersonaPath(userId) {
  const personasDir = path.join(process.cwd(), "personas");
  if (!fs.existsSync(personasDir)) fs.mkdirSync(personasDir);
  return path.join(personasDir, `${userId}_assistant.json`);
}

// üìñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
function loadPersona(user, personaPath) {
  let personaData = {
    username: user.fullName,
    persona: PERSONA_DESCRIPTION,
    history: [],
  };
  if (fs.existsSync(personaPath)) {
    try {
      personaData = JSON.parse(fs.readFileSync(personaPath, "utf8"));
    } catch (e) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${user._id}:`, e);
    }
  }
  return personaData;
}

// üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
function savePersona(personaPath, personaData) {
  fs.writeFileSync(personaPath, JSON.stringify(personaData, null, 2), "utf8");
}

// üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å prompt
function buildPrompt(personaData, question) {
  const historyText = personaData.history
    .map(pair => `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${pair.user}\n${PERSONA_NAME}: ${pair.assistant}`)
    .join('\n');
  return `–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: ${personaData.username}\n\n${personaData.persona}\n\nüï∞ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n${historyText}\n\n‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n${question}`;
}

function cleanAssistantAnswer(answer) {
  // –£–¥–∞–ª—è–µ–º "Thinking..." –∏ "done thinking" –∏–∑ –æ—Ç–≤–µ—Ç–∞
  answer = answer.replace(/Thinking\.\.\.[\s\S]*?\.\.\.done thinking\.\n*/i,  '');

  // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ - –æ—Ç—Ä–µ–∑–∞–µ–º –≤—Å—ë –¥–æ –Ω–µ–≥–æ
  const parts = answer.split(/\n\s*\n/);
  if (parts.length > 1) {
    return parts.slice(1).join('\n\n').trim();
  }

  // –ï—Å–ª–∏ –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º trimmed
  return answer.trim();
}

// ‚è≥ –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const spinnerFrames = ['‚†ã','‚†ô','‚†π','‚†∏','‚†º','‚†¥','‚†¶','‚†ß','‚†á','‚†è'];
let spinnerIndex = 0;
let spinnerInterval;

function startSpinner() {
  process.stdout.write(`\nü§î ${PERSONA_NAME} –¥—É–º–∞–µ—Ç... `);
  spinnerInterval = setInterval(() => {
    process.stdout.write(`\rü§î ${PERSONA_NAME} –¥—É–º–∞–µ—Ç... ${spinnerFrames[spinnerIndex]} `);
    spinnerIndex = (spinnerIndex + 1) % spinnerFrames.length;
  }, 100);
}

function stopSpinner() {
  clearInterval(spinnerInterval);
  process.stdout.write('\r                              \r');
}

// üì° –ó–∞–ø—Ä–æ—Å –∫ Ollama —á–µ—Ä–µ–∑ HTTP API
async function askOllama(prompt) {
  return new Promise((resolve, reject) => {
    const ollama = spawn('ollama', ['run', MODEL_NAME], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    let stdout = '';
    let stderr = '';

    ollama.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    ollama.stderr.on('data', (data) => {
      stderr += data.toString();
    });

    ollama.on('error', (err) => {
      console.error(`[ERROR] Ollama process error: ${err.message}`);
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: ${err.message}`));
    });

    ollama.on('close', (code) => {
      stopSpinner();
      if (code !== 0) {
        console.error(`[FAIL] Ollama –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}, stderr: ${stderr}`);
        reject(new Error(`Ollama –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}: ${stderr}`));
        return;
      }
      if (stderr.trim()) {
        console.warn(`[WARN] Ollama –≤—ã–¥–∞–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏: ${stderr}`);
      }
      resolve(stdout.trim());
    });

    console.log(`[PROMPT] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ Ollama:\n${prompt}`);
    ollama.stdin.write(prompt + "\n");
    ollama.stdin.end();
  });
}


// üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export const askAssistant = async (req, res) => {
  try {
    const userId = req.userId;
    const { question } = req.body;
    if (!question) return res.status(400).json({ error: "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞" });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const personaPath = getPersonaPath(userId);
    let personaData = loadPersona(user, personaPath);

    console.log(`üôã‚Äç‚ôÇÔ∏è ${user.fullName} (${user._id}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ${PERSONA_NAME}: "${question}"`);
    startSpinner();

    const prompt = buildPrompt(personaData, question);
    const answerRaw = await askOllama(prompt);
    const answer = cleanAssistantAnswer(answerRaw);

    console.log(`üí¨ ${PERSONA_NAME} –æ—Ç–≤–µ—Ç–∏–ª–∞: "${answer}"`);

    personaData.history.push({ user: question, assistant: answer });
    if (personaData.history.length > 15) personaData.history.shift();
    savePersona(personaPath, personaData);

    await Message.create({
      id: new mongoose.Types.ObjectId().toString(),
      text: question,
      user: userId,
      sender: "user",
    });

    await Message.create({
      id: new mongoose.Types.ObjectId().toString(),
      text: answer,
      user: userId,
      sender: "assistant",
      assistantName: PERSONA_NAME,
    });

    res.json({ answer });
  } catch (error) {
    stopSpinner();
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ${PERSONA_NAME}:`, error);
    res.status(500).json({ error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ${PERSONA_NAME}` });
  }
};


