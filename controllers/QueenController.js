import fs from "fs";
import path from "path";
import { spawn } from "child_process";
import mongoose from "mongoose";
import User from "../model/User.js";
import Message from "../model/Message.js";

// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getPersonaPath(userId) {
  const personasDir = path.join(process.cwd(), "personas");
  if (!fs.existsSync(personasDir)) fs.mkdirSync(personasDir);
  return path.join(personasDir, `${userId}_queen.json`);
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
function loadPersona(user, personaPath) {
  let personaData = {
    username: user.fullName,
    persona: "–¢—ã ‚Äî –ö–≤–∏–Ω, —É–º–Ω–∞—è –∏ –∏—Ä–æ–Ω–∏—á–Ω–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞.",
    history: [],
  };
  if (fs.existsSync(personaPath)) {
    try {
      personaData = JSON.parse(fs.readFileSync(personaPath, "utf8"));
    } catch {}
  }
  return personaData;
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
function savePersona(personaPath, personaData) {
  fs.writeFileSync(personaPath, JSON.stringify(personaData, null, 2), "utf8");
}

// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å prompt
function buildPrompt(personaData, question) {
  const historyText = personaData.history
    .map(pair => `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${pair.user}\n–ö–≤–∏–Ω: ${pair.queen}`)
    .join('\n');
  return `–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: ${personaData.username}\n\n${personaData.persona}\n\nüï∞ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n${historyText}\n\n‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n${question}`;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ö–≤–∏–Ω (—É–±–∏—Ä–∞–µ—Ç "Thinking..." –∏ –∞–Ω–∞–ª–∏–∑)
function cleanQueenAnswer(answer) {
  // –£–¥–∞–ª—è–µ—Ç –≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞)
  const parts = answer.split(/\r?\n\r?\n/);
  if (parts.length > 1) {
    return parts.slice(1).join('\n\n').trim();
  }
  return answer.trim();
}

// –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è (–ö–≤–∏–Ω –¥—É–º–∞–µ—Ç)
const spinnerFrames = ['‚†ã','‚†ô','‚†π','‚†∏','‚†º','‚†¥','‚†¶','‚†ß','‚†á','‚†è'];
let spinnerIndex = 0;
let spinnerInterval;

function startSpinner() {
  process.stdout.write('\nü§î –ö–≤–∏–Ω –¥—É–º–∞–µ—Ç... ');
  spinnerInterval = setInterval(() => {
    process.stdout.write('\rü§î –ö–≤–∏–Ω –¥—É–º–∞–µ—Ç... ' + spinnerFrames[spinnerIndex] + ' ');
    spinnerIndex = (spinnerIndex + 1) % spinnerFrames.length;
  }, 100);
}

function stopSpinner() {
  clearInterval(spinnerInterval);
  process.stdout.write('\r                              \r');
}

// –ó–∞–ø—Ä–æ—Å –∫ Ollama
async function askOllama(prompt) {
  return new Promise((resolve, reject) => {
    const ollama = spawn('ollama', ['run', 'qwen3:4b'], { stdio: ['pipe', 'pipe', 'pipe'] });
    let chunks = [];
    ollama.stdout.on('data', (data) => chunks.push(data));
    ollama.stderr.on('data', () => {});
    ollama.on('close', (code) => {
      stopSpinner();
      if (code !== 0 || chunks.length === 0) {
        reject("Ollama error");
        return;
      }
      const buffer = Buffer.concat(chunks);
      resolve(buffer.toString('utf8').trim());
    });
    ollama.stdin.end(prompt);
  });
}

export const askQwen = async (req, res) => {
  try {
    const userId = req.userId;
    const { question } = req.body;
    if (!question) return res.status(400).json({ error: "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞" });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const personaPath = getPersonaPath(userId);
    let personaData = loadPersona(user, personaPath);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üôã‚Äç‚ôÇÔ∏è ${user.fullName} (${user._id}) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ö–≤–∏–Ω: "${question}"`);

    // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ö–≤–∏–Ω –¥—É–º–∞–µ—Ç, –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    startSpinner();

    // –§–æ—Ä–º–∏—Ä—É–µ–º prompt –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    const prompt = buildPrompt(personaData, question);
    const answerRaw = await askOllama(prompt);

    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –ö–≤–∏–Ω –æ—Ç "Thinking..." –∏ –∞–Ω–∞–ª–∏–∑–∞
    const answer = cleanQueenAnswer(answerRaw);

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ö–≤–∏–Ω
    console.log(`üí¨ –ö–≤–∏–Ω (${user.queen}) –æ—Ç–≤–µ—Ç–∏–ª–∞: "${answer}"`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    personaData.history.push({ user: question, queen: answer });
    if (personaData.history.length > 15) personaData.history.shift();
    savePersona(personaPath, personaData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MongoDB —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ id
    await Message.create({
      id: new mongoose.Types.ObjectId().toString(),
      text: question,
      user: userId,
      sender: "user",
    });
    await Message.create({
      id: new mongoose.Types.ObjectId().toString(),
      text: answer,
      user: userId,
      sender: "queen",
      queenName: user.queen,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç –ö–≤–∏–Ω
    res.json({ answer });
  } catch (error) {
    stopSpinner();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ö–≤–∏–Ω:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ö–≤–∏–Ω" });
  }
};