import mongoose from "mongoose";

const UserShema = new mongoose.Schema(
  {
    fullName: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    passwoldHash: {
      type: String,
      required: true,
    },
    language: {
      type: String,
      required: true,
      default: "ru",
    },
    avatar: {
      type: String,
      required: true,
    },
    race: {
      type: String,
      required: true,
    },
    gender: {
      type: String,
      required: true,
    },
    // üëë –ü—Ä–∏–≤—è–∑–∫–∞ –∫–≤–∏–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    queen: {
      type: String,
      required: false,
    },
    attributes: {
      stats: {
        //–°–∏–ª–∞
        strength: { type: Number, required: true, default: 0 },
        //–õ–æ–≤–∫–æ—Å—Ç—å
        agility: { type: Number, required: true, default: 0 },
        //–£–¥–∞—á–∞
        luck: { type: Number, required: true, default: 0 },
        //–†–µ–∞–∫—Ü–∏—è
        reaction: { type: Number, required: true, default: 0 },
        //–ó–ª–æ—Å—Ç—å
        anger: { type: Number, required: true, default: 0 },
      },
      parameters: {
        //–°–ª–æ–∂–µ–Ω–∏–µ
        health: { type: Number, required: true, default: 0 },
        //–ú–∞–Ω–∞
        mana: { type: Number, required: true, default: 0 },
        //–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
        initiative: { type: Number, required: true, default: 0 },
      },
      mastery: {
        //–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–∞—â–∏—Ç—ã
        defenseMastery: { type: Number, required: true, default: 0 },
        //–í–ª–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏–µ–º
        weaponMastery: { type: Number, required: true, default: 0 },
        //–ö—É–ª–∞—á–Ω—ã–π –±–æ–π
        unarmedCombat: { type: Number, required: true, default: 0 },
      },
      protect: {
        //–û–±–µ—Ä–µ–≥ —É–≤–∞—Ä–æ—Ç–∞
        evasionProtect: { type: Number, required: true, default: 0 },
        //–û–±–µ—Ä–µ–≥ —É–¥–∞—á–∏
        luckProtect: { type: Number, required: true, default: 0 },
        //–û–±–µ—Ä–µ–≥ –æ—Ç–≤–µ—Ç–∞
        responseProtect: { type: Number, required: true, default: 0 },
        //–û–±–µ—Ä–µ–≥ –∫—Ä–∏—Ç–∞
        criticalProtect: { type: Number, required: true, default: 0 },
      },
      antiProtect: {
        //–ê–Ω—Ç–∏-–æ–±–µ—Ä–µ–≥ —É–≤–∞—Ä–æ—Ç–∞
        evasionAntiProtect: { type: Number, required: true, default: 0 },
        //–ê–Ω—Ç–∏-–æ–±–µ—Ä–µ–≥ —É–¥–∞—á–∏
        luckAntiProtect: { type: Number, required: true, default: 0 },
        //–ê–Ω—Ç–∏-–æ–±–µ—Ä–µ–≥ –æ—Ç–≤–µ—Ç–∞
        responseAntiProtect: { type: Number, required: true, default: 0 },
        //–ê–Ω—Ç–∏-–æ–±–µ—Ä–µ–≥ –∫—Ä–∏—Ç–∞
        criticalAntiProtect: { type: Number, required: true, default: 0 },
      },
    },
  },
  {
    timestamps: true,
  }
);

// üëë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º—è –∫–≤–∏–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
UserShema.pre('save', function(next) {
  if (!this.queen && this.fullName) {
    this.queen = `${this.fullName.toLowerCase()}_quin`;
  }
  next();
});

export default mongoose.model("User", UserShema);
